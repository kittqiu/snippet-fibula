## 创建Snippet
本页面用于创建一个函数Snippet、一个代码模块，甚至可以是一个发布的二进制模块文件

### 如何填写
* 名称：请填写函数名、代码模块或二进制模块名称
* 简述：请填写简要的功能描述
* 语言：请选择编程语言
* 开发环境：请选择适用的运行环境。若可用于多个平台，请选择“通用”
* 关键字: 每个关键字以空格分隔。主要用于搜索功能。因此，关键字应该尽量完备和准确。另外，为了方便用户能搜索名称中含有的词语，请尽量也从名称中抽出词语作为关键字。例如名称是CloseFile，可以设置关键字为"文件 关闭 File Close"
* 代码块：填充代码。该代码将经处理后展示给用户查看。若代码中含有有效的帮助头，它将被自动解析，并提取出后进行格式化。帮助头的格式参见下一节“函数帮助头格式”。
* 帮助：需要采用markdown格式填写。请尽量完成所有提示信息内容的填写。以便用户能更好地使用该Snippet
* 附件：可选择上传1个或多个附件。对于代码模块和二进制模块类型，一般需要上传至少一个附件。


### 函数帮助头格式
帮助头的格式基于采用doxygen格式，只是没有这么强大。

示例1：

	/*!
	 * \brief 获取文件大小
	 * \param [in] pFile -目标文件全路径
	 * \return 返回文件的大小
	 */
	size_t DGetFileSize( const char* pFile ); 

格式语法如下：
* 头部采用“/\*\*”或“/\*!”，尾部采用“*/”。中间表示内容体
* 从第二行起的行首空格和*将被忽略，因此可以包含多个空格或星号。
* 除了被忽略的行首空格和星号外，每行行首是一个命令，命令总是以“\”或“@”字符作起始位，每个命令表示的含认都不同。例如"\brief"表示本行的内容是简述。一个命令可以跟随着多个参数，参数之间采用空格间隔
 * \brief: 表示函数功能的简述。参数只有简述内容。如上例。
 * \details: 表示详细说明。参数只需要一段广本。该命令是可选的。
 * \name: 表示函数名称。参数只需要表示函数名称的文本。例如：\name CloseFile
 * \param: 表示函数参数。参数有三个。第一个表示参数方向，可取值为[in]、[out]、[in/out]，第二个参数是函数参数名称，第三个是参数的说明广本。
 * \return: 表示返回值说明。参数只有一个，就是返回值说明文本
 * \retval: 表示一个特定返回值的说明。参数有两个，第一个是返回的值，第二个是值的含义。如下示例。如果有了该命令，\return命令将自动失效。



示例2：

	 /*!
	  * \brief 把数据追加到文件尾 
	  * \details 把数据追加到文件尾。若文件不存在，则尝试创建文件。文件存在后，进行追加。 
	  * \param [in] pFile -目标文件全路径
	  * \param [in] pData -存放预写入文件的数据
	  * \param [in] nDataSize -需要写入多少个字节。注意，该值不可为0xFFFFFFFF，即(size_t)(-1)，若为该值，函数将返回失败
	  * return 若返回RET_SUCCESS表示追加成功；若返回RET_ERROR表示追加失败；若返回RET_INVALID_PARAM表示参数无效
	  * \retval RET_SUCCESS 追加成功
	  * \retval RET_ERROR 追加失败
	  * \retval RET_INVALID_PARAM 表示参数无效
	  */
	 int DAppendDataToFile( const char* pFile, void* pData, const size_t nDataSize);



